---
title: "CDH Operations"
date: 2021-02-09T20:27:56+08:00
draft: false
---

以下为回收宝 CDH 构建实验过程记录

* CDH Ops

** 0. 查看CPU信息
{{< code language="shell" >}}
  # 总核数 = 物理CPU个数 X 每颗物理CPU的核数
  # 总逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数

  # 查看物理CPU个数
  cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l

  # 查看每个物理CPU中core的个数(即核数)
  cat /proc/cpuinfo| grep "cpu cores"| uniq

  # 查看逻辑CPU的个数
  cat /proc/cpuinfo| grep "processor"| wc -l

  # 查看CPU信息（型号）
  cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c
{{</code>}}
** 1. 配置域名解析hostname
{{< code language="shell" >}}
  cat /etc/hosts
  172.16.16.5 cdh01
  172.16.16.4 cdh02
  172.16.16.17 cdh03
{{</code>}}
** 2. 配置主机名
RHEL6：/etc/sysconfig/network  hostname=cdh01
RHEL7：/etc/hostname  cdh01
然后重启主机名即改变

** 3. 挂载数据盘
{{< code language="shell" >}}
  df -h 已挂载磁盘大小
  df -Th 已挂载磁盘类型，hadoop支持ext4
{{</code>}}

1. 检查硬盘设备是否有数据盘
   {{< code language="shell" >}}
     fdisk -l
   {{</code>}}

2. 数据硬盘分区
   {{< code language="shell" >}}
     fdisk /dev/vdb
   {{</code>}}

   依次输入 n , p,  1.  回车, 回车, wq

   当容量大于2T时需要使用GPT分区：使用 parted 建立大小超过2T的分区
　　1，parted /dev/vdb
　　可以输入p打印磁盘信息，查看分区的情况，找到起始和结束位置。
　　2，mklabel gpt
　　设置分区类型为gpt
　　3，mkpart primary 0% 100%
　　primary指分区类型为主分区，0是分区开始位置，100%是分区结束位置。相同的命令为：mkpart primary 0-1 或者是：mkpart ?primary 0 ?XXXXXX结束的空间
　　4，print
　　打印当前分区,查看分区设置是否正确
　　5，quit
　　完成后用quit命令退出。

3. ext4 格式化硬盘
   {{< code language="shell" >}}
     mkfs.ext4 /dev/vdb1
   {{</code>}}

4. 挂载
   {{< code language="shell" >}}

     # CDH001
     mkdir -p /hd/vdb1
     mount /dev/vdb1 /hd/vdb1
     # 如果要取消挂载
     umount /data


     # bi01
     mkdir -p /data01
     mount /dev/vdb1 /data01
     # 如果要取消挂载
     umount /data
   {{</code>}}

5. 写入fstab设置开机自动挂载
   {{< code language="shell" >}}
     echo '/dev/vdb1 /hd/vdb1 ext4 defaults 0 0' >> /etc/fstab

     echo '/dev/vdb1 /data01 ext4 defaults 0 0' >> /etc/fstab
   {{</code>}}

** 4. 配置静态IP
{{< code language="shell" >}}
  vim /etc/sysconfig/network-scripts/ifcfg-eth0

  service network restart # 重启网络生效

  ifconfig # 可以查看IP和掩码
  route -n # 可以查看网关

  cat /etc/resolv.conf # 可以查看DNS
  DEVICE=eth0
  BOOTPROTO=static
  ONBOOT=yes
  IPADDR=10.0.0.60
  NETMASK=255.255.255.0
  GATEWAY=10.0.0.253

  172.16.0.253

  # dns
  # /etc/resolv.conf
  # Generated by NetworkManager
  nameserver 100.100.2.136
  nameserver 100.100.2.138
{{</code>}}

** 5. 关闭防火墙
{{< code language="shell" >}}
  vim /etc/selinux/config     # 将SELINUX=enforcing改为SELINUX=disabled。
  systemctl stop firewalld    # 停止firewall
  systemctl disable firewalld # 禁止firewall开机启动
  systemctl status firewalld  # 查看默认防火墙状态（关闭后显示inactive (dead)，开启后显示active (running)）
{{</code>}}

** 6. 禁用SELinux
{{< code language="shell" >}}
getenforce  # 查看SELinux是否启用
vim /etc/selinux/config # 将SELinux=disabled  SELINUXTYPE=targeted重启生效
{{</code>}}

** 7. ssh免密登录

先在cdh01上执行：

{{< code language="shell" >}}
  ssh-keygen -t rsa #一路回车到完成
  ssh-copy-id -i ~/.ssh/id_rsa.pub root@bi01 #将公钥拷贝到本机的authorized_keys上

  ssh-copy-id -i ~/.ssh/id_rsa.pub hive@bi01
{{</code>}}

再在其他节点分别执行以下命令：

{{< code language="shell" >}}
  ssh-keygen -t rsa #一路回车到完成
  ssh-copy-id -i ~/.ssh/id_rsa.pub root@bi01 #注意此处不变，将公钥拷贝到cdh01的authorized_keys上

  ssh-copy-id -i ~/.ssh/id_rsa.pub hive@bi01
{{</code>}}

在cdh01上，将authorized_keys分发到其他节点服务器：

{{< code language="shell" >}}
  scp ~/.ssh/authorized_keys root@cdh02:~/.ssh/
  scp ~/.ssh/authorized_keys root@cdh03:~/.ssh/
{{</code>}}

如果启动无效果

{{< code language="shell" >}}
  vim /etc/ssh/sshd_config # 需要修改ssh配置
  RSAAuthentication ? yes ? #启用 RSA 认证
  PubkeyAuthentication ? yes ? #启用公钥私钥配对认证方式
  AuthorizedKeysFile ? .ssh/authorized_keys ? #公钥文件路径（和上面生成的文
  StrictModes ? no ?
{{</code>}}

设置完之后记得重启SSH服务，才能使刚才设置有效。 =service sshd restar=

当我们用ssh连接到其他linux平台时，会遇到以下提示：

{{< code language="shell" >}}
  The authenticity of host ‘git.sws.com (10.42.1.88)’ can’t be established.
  ECDSA key fingerprint is 53:b9:f9:30:67:ec:34:88:e8:bc:2a:a4:6f:3e:97:95.
  Are you sure you want to continue connecting (yes/no)? yes
{{</code>}}

而此时必须输入yes，连接才能建立。 但其实我们可以在ssh_config配置文件中配置此项， 打开/etc/ssh/ssh_config文件：

找到：

{{< code language="shell" >}}
  # StrictHostKeyChecking ask
{{</code>}}

修改为

{{< code language="shell" >}}
  StrictHostKeyChecking no
{{</code>}}

这个选项会自动的把 想要登录的机器的SSH pub key 添加到 /root/.ssh/know_hosts 中。

如果hostname改变则需要删除know_hosts对应的信息才能再登录

** 8. 配置NTP服务

阿里云自带NTP同步服务

{{< code language="shell" >}}
  systemctl start ntpd  # 启动ntp服务
  systemctl enable ntpd # 配置开机自动启动ntp服务
  pgrep ntpd # 可以查看到ntp进程号
  systemctl list-unit-files # 列出系统内置服务自启动状态 centos7以后
  chkconfig --list # 列出系统外置服务自启动状态
  systemctl status chronyd  # centos7以后系统自带chronyd的时间同步
  systemctl disable chronyd.service  # 需将自带的chronyd服务关闭，ntp才会自启动。否则ntp无法开机自启动
{{</code>}}

若要自己搭建ntp服务器，则如下步骤：

集群中所有主机必须保持时间同步，如果时间相差较大会引起各种问题。 具体思路如下：
master节点作为ntp服务器与外界对时中心同步时间，随后对所有datanode节点提供时间同步服务。 所有datanode节点以master节点为基础同步时间。
所有节点安装相关组件：yum install ntp。完成后，配置开机启动：chkconfig ntpd on,检查是否设置成功：chkconfig --list ntpd其中2-5为on状态就代表成功。（centos7之前）
如果需要离线安装，则使用rpm命令安装安装包。下面为centos的NTP安装包

{{< code language="shell" >}}
  rpm -ivh autogen-libopts-5.18-5.el7.x86_64
  rpm -ivh ntpdate-4.2.6p5-28.el7.centos.x86_64
  rpm -ivh ntp-4.2.6p5-28.el7.centos.x86_64
{{</code>}}

主节点配置

在配置之前，先使用ntpdate手动同步一下时间，免得本机与对时中心时间差距太大，使得ntpd不能正常同步。这里选用103.226.213.30作为对时中心,ntpdate -u 103.226.213.30。
ntp服务只有一个配置文件，配置文件位置为/etc/ntp.conf，配置好了就OK。 这里只给出有用的配置，不需要的配置都用#注掉，这里就不在给出：

{{< code language="conf" >}}
  driftfile /var/lib/ntp/drift  #系统时间与BIOS事件的偏差记录
  restrict default kod nomodify notrap nopeer noquery  #restrict 控制相关权限
  restrict -6 default kod nomodify notrap nopeer noquery  #restrict -6 表示IPV6地址的权限设置
  restrict 127.0.0.1
  restrict -6 ::1
  server 103.226.213.30 prefer  #prefer表示优先主机
  includefile /etc/ntp/crypto/pw
  keys /etc/ntp/keys
  disable monitor
{{</code>}}

配置文件完成，保存退出，启动服务，执行如下命令：service ntpd start

检查是否成功，用ntpstat命令查看同步状态，出现以下状态代表启动成功：

{{< code language="shell" >}}
  synchronised to NTP server () at stratum 2
  time correct to within 74 ms
  polling server every 128 s
{{</code>}}

如果出现异常请等待几分钟，一般等待5-10分钟才能同步。

配置ntp客户端（所有datanode节点）

{{< code language="conf" >}}
  driftfile /var/lib/ntp/drift  #系统时间与BIOS事件的偏差记录
  restrict default kod nomodify notrap nopeer noquery  #restrict 控制相关权限
  restrict -6 default kod nomodify notrap nopeer noquery  #restrict -6 表示IPV6地址的权限设置
  restrict 127.0.0.1
  restrict -6 ::1
  server cdh03 prefer  #prefer表示优先主机
  includefile /etc/ntp/crypto/pw
  keys /etc/ntp/keys
  disable monitor
{{</code>}}

ok保存退出，请求服务器前，请先使用ntpdate手动同步一下时间：ntpdate -u cdh03 (主节点ntp服务器)
这里可能出现同步失败的情况，请不要着急，一般是本地的ntp服务器还没有正常启动，一般需要等待5-10分钟才可以正常同步。启动服务：service ntpd start
因为是连接内网，这次启动等待的时间会比master节点快一些，但是也需要耐心等待一会儿。

** 9. 设置swap

为了避免服务器使用swap功能而影响服务器性能，一般都会把vm.swappiness修改为0（cloudera建议10以下） vim /etc/sysctl.conf  设置 vm.swappiness = 0 重启生效

上述方法rhel6有效，rhel7.2中:tuned服务会动态调整系统参数, 查找tuned中配置，直接修改配置

{{< code language="shell" >}}
  cd /usr/lib/tuned/
  grep “vm.swappiness” * -R 查询出后依次修改
{{</code>}}

参考：sysctl修改内核参数 重启不生效 https://blog.csdn.net/ygtlovezf/article/details/79014299

** 10. 禁用透明页

{{< code language="shell" >}}
  echo never > /sys/kernel/mm/transparent_hugepage/defrag
  echo never > /sys/kernel/mm/transparent_hugepage/enabled
{{</code>}}

永久生效 在/etc/rc.local 添加上面命令
给与可执行权限：chmod +x /etc/rc.d/rc.local

** 11. jdk安装

{{< code language="shell" >}}
  rpm -qa | grep java     # 查询已安装的java
  yum remove java*        # 卸载已安装的java
  rpm -ivh oracle-j2sdk1.8-1.8.0+update181-1.x86_64.rpm
  vim /etc/profile        # 末尾添加

  # java
  export JAVA_HOME=/usr/java/jdk1.8.0_181-cloudera
  export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib
  export PATH=$PATH:$JAVA_HOME/bin

  source /etc/profile
  java -version           # 验证
{{</code>}}

** 12. mysql-jdbc包

{{< code language="shell" >}}
  mkdir -p /usr/share/java
  mv /opt/mysql-j/mysql-connector-java-5.1.34.jar /usr/share/java/
  mysql-connector-java-5.1.34.jar 一定要命名为 mysql-connector-java.jar
{{</code>}}

** 13. 安装mysql

{{< code language="shell" >}}
  卸载mariadb：rpm -qa|grep mariadb
  rpm -e --nodeps mariadb-libs-5.5.60-1.el7_5.x86_64


  cd /opt/mysql/
  tar -xvf ./mysql-5.7.19-1.el7.x86_64.rpm-bundle.tar

  rpm -ivh mysql-community-common-5.7.19-1.el7.x86_64.rpm
  rpm -ivh mysql-community-libs-5.7.19-1.el7.x86_64.rpm
  rpm -ivh mysql-community-client-5.7.19-1.el7.x86_64.rpm
  rpm -ivh mysql-community-server-5.7.19-1.el7.x86_64.rpm
{{</code>}}

这个可能报错  安装yum install libaio

{{< code language="shell" >}}
  rpm -ivh mysql-community-libs-compat-5.7.19-1.el7.x86_64.rpm
{{</code>}}

MYSQL配置:

{{< code language="shell" >}}
  mysqld --initialize --user=mysql # 初始化mysql使mysql目录的拥有者为mysql用户
  cat /var/log/mysqld.log # 最后一行将会有随机生成的密码
  mysqladmin -u用户名 -p旧密码 password 新密码    将随机密码修改为用户密码

  set password for root@localhost = password('123');

  systemctl start mysqld.service # 设置mysql服务自启

  A temporary password is generated for root@localhost: ;pTmBT+bf5et
{{</code>}}

{{< code language="shell" >}}
  服务名 数据库名 用户名
  Cloudera_Manager_Server scm scm
  Activity_Monitor amon amon
  Reports_Manager rman rman
  Hue hue hue
  Hive_Metastore_Server metastore hive
  Sentry_Server sentry sentry
  Cloudera_Navigator_Audit_Server nav nav
  Cloudera_Navigator_Metadata_Server navms navms
  Oozie oozie oozie
{{</code>}}

CDH不支持mysql的GTID功能

建库和用户

查看用户

{{< code language="sql" >}}
  select host,user from mysql.user;

  CREATE DATABASE scm DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
  CREATE DATABASE amon DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
  CREATE DATABASE rman DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
  CREATE DATABASE hue DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
  CREATE DATABASE metastore DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
  CREATE DATABASE sentry DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
  CREATE DATABASE nav DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
  CREATE DATABASE navms DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
  CREATE DATABASE oozie DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;


  GRANT ALL ON scm.* TO 'scm'@'%' IDENTIFIED BY '123456';
  GRANT ALL ON amon.* TO 'amon'@'%' IDENTIFIED BY '123456';
  GRANT ALL ON rman.* TO 'rman'@'%' IDENTIFIED BY '123456';
  GRANT ALL ON hue.* TO 'hue'@'%' IDENTIFIED BY '123456';
  GRANT ALL ON metastore.* TO 'hive'@'%' IDENTIFIED BY '123456';
  GRANT ALL ON sentry.* TO 'sentry'@'%' IDENTIFIED BY '123456';
  GRANT ALL ON nav.* TO 'nav'@'%' IDENTIFIED BY '123456';
  GRANT ALL ON navms.* TO 'navms'@'%' IDENTIFIED BY '123456';
  GRANT ALL ON oozie.* TO 'oozie'@'%' IDENTIFIED BY '123456';

  flush privileges;
{{</code>}}

** 14. 安装Httpd服务（manager节点）

{{< code language="shell" >}}
  yum install httpd
  service httpd start
  systemctl enable httpd.service # 设置httpd服务开机自启
{{</code>}}

** 15. 安装createrepo（manager节点）

{{< code language="shell" >}}
  yum install createrepo
{{</code>}}

** 16. 配置Cloudera Manager包yum源（manager节点）

{{< code language="shell" >}}
  mkdir -p /var/www/html/cloudera-repos/
{{</code>}}
将下载的cm包文件移到此目录下:

{{< code language="shell" >}}
  mv cm6 /var/www/html/cloudera-repos/
  cd /var/www/html/cloudera-repos/cm6/
{{</code>}}

创建repodata：

{{< code language="shell" >}}
  createrepo /var/www/html/cloudera-repos/cm6
{{</code>}}

则会在该目录下生成repodata

{{< code language="conf" >}}
  # vim /etc/yum.repos.d/cloudera-manager.repo

  [cloudera-manager]
  name=Cloudera Manager, Version
  baseurl=http://10.0.0.73/cloudera-repos/cm6/
  enable=true
  gpgcheck=false
{{</code>}}

注意路径：http://10.0.0.73/cloudera-repos/cm6/

将该配置复制到其他节点

{{< code language="shell" >}}
  scp /etc/yum.repos.d/cloudera-manager.repo bitest002:/etc/yum.repos.d

  yum clean all
  yum makecache
{{</code>}}

** 17. 安装 Cloudera Manager（manager节点）

{{< code language="shell" >}}
  yum install cloudera-manager-daemons cloudera-manager-agent cloudera-manager-server --skip-broken --nogpgcheck

  yum install cloudera-manager-daemons cloudera-manager-agent cloudera-manager-server
{{</code>}}

安装完CM后/opt/ 下会出现cloudera目录

{{< code language="shell" >}}
  mv /opt/parcels/* /opt/cloudera/parcel-repo # 将parcel包移动到指定位置
{{</code>}}

在/opt/cloudera/parcel-repo执行以下命令：

{{< code language="shell" >}}
  sha1sum CDH-6.2.0-1.cdh6.2.0.p0.967373-el7.parcel | awk '{ print $1 }' > CDH-6.2.0-1.cdh6.2.0.p0.967373-el7.parcel.sha
{{</code>}}

执行初始化脚本:

{{< code language="shell" >}}
  /opt/cloudera/cm/schema/scm_prepare_database.sh -h172.16.0.122 mysql scm scm 123456
{{</code>}}

172.16.0.122为mysql所在IP

打开server服务:
service cloudera-scm-server start
静候几分钟，打开http://manager:7180

** 18. CDH界面安装

注意点：

1. 自定义存储库：http://10.0.0.73/cloudera-repos/cm6

1. 选择和自己安装版本相对应的parcel包

2. JDK不勾选，我们已经自己安装了

3. Install Agents时有可能会失败，一般为网络原因，多重试几次直到成功。

{{< code language="shell" >}}
  curl -X POST -u admin:adminbi123 -i \
      --header 'Content-Type: application/json' \
      --header 'Accept: application/json' \
      -d '{}' \
      'http://10.0.0.73:7180/api/v32/clusters/Cluster_1/services/impala/roles/impala-IMPALAD-d38eb94f83ef28f6c8dcdc71601ab2b4/roleCommands/stop'

  curl -X GET -u admin:adminbi123 -i \
      --header 'Content-Type: application/json' \
      --header 'Accept: application/json' \
      -d '{}' \
      'http://10.0.0.73:7180/api/v32/clusters/Cluster_1/services/impala/commandsByName'


  curl -X POST -u admin:adminbi123 -i \
      --header 'Content-Type: application/json' \
      --header 'Accept: application/json' \
      -d '{}' \
      'http://10.0.0.73:7180/api/v32/clusters/Cluster_1/services/impala/roleCommands/restart'
{{</code>}}
